###################################################################
##
## Name     : axis_xmatchpro
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axis_xmatchpro

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION RUN_NGCBUILD = TRUE
OPTION STYLE = MIX
OPTION DESC = AXIS_XmatchPRO
OPTION LONG_DESC = XMatchPRO

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = M_AXIS_CD_OUT, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_AXIS_CD_IN, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = M_AXIS_UC_OUT, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = S_AXIS_UC_IN, BUS_STD = AXIS, BUS_TYPE = TARGET

## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXIS_CD_IN_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S_AXIS_CD_IN
PARAMETER C_S_AXIS_CD_IN_TDATA_WIDTH = 32, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S_AXIS_CD_IN
PARAMETER C_M_AXIS_CD_OUT_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXIS_CD_OUT
PARAMETER C_M_AXIS_CD_OUT_TDATA_WIDTH = 32, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXIS_CD_OUT

PARAMETER C_S_AXIS_UC_IN_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S_AXIS_UC_IN
PARAMETER C_S_AXIS_UC_IN_TDATA_WIDTH = 32, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = S_AXIS_UC_IN
PARAMETER C_M_AXIS_UC_OUT_PROTOCOL = GENERIC, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXIS_UC_OUT
PARAMETER C_M_AXIS_UC_OUT_TDATA_WIDTH = 32, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXIS_UC_OUT

PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MIN_SIZE = 0x000001ff, DT = std_logic_vector, BUS = S_AXI
PARAMETER C_USE_WSTRB = 1, DT = INTEGER
PARAMETER C_DPHASE_TIMEOUT = 8, DT = INTEGER
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x200, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_NUM_REG = 1, DT = INTEGER
PARAMETER C_NUM_MEM = 1, DT = INTEGER
PARAMETER C_SLV_AWIDTH = 32, DT = INTEGER
PARAMETER C_SLV_DWIDTH = 32, DT = INTEGER
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI

## Ports

PORT PORT_S_AXIS_CD_IN_TREADY = "", DIR=O
PORT PORT_S_AXIS_CD_IN_TDATA = "", DIR=O, VEC=[31:0], ENDIAN = LITTLE
PORT PORT_S_AXIS_CD_IN_TLAST = "", DIR=O
PORT PORT_S_AXIS_CD_IN_TVALID = "", DIR=O
PORT PORT_M_AXIS_CD_OUT_TVALID = "", DIR=O
PORT PORT_M_AXIS_CD_OUT_TDATA = "", DIR=O, VEC=[31:0], ENDIAN = LITTLE
PORT PORT_M_AXIS_CD_OUT_TLAST = "", DIR=O
PORT PORT_M_AXIS_CD_OUT_TREADY = "", DIR=O

PORT PORT_S_AXIS_UC_IN_TREADY = "", DIR=O
PORT PORT_S_AXIS_UC_IN_TDATA = "", DIR=O, VEC=[31:0], ENDIAN = LITTLE
PORT PORT_S_AXIS_UC_IN_TLAST = "", DIR=O
PORT PORT_S_AXIS_UC_IN_TVALID = "", DIR=O
PORT PORT_M_AXIS_UC_OUT_TVALID = "", DIR=O
PORT PORT_M_AXIS_UC_OUT_TDATA = "", DIR=O, VEC=[31:0], ENDIAN = LITTLE
PORT PORT_M_AXIS_UC_OUT_TLAST = "", DIR=O
PORT PORT_M_AXIS_UC_OUT_TREADY = "", DIR=O

PORT PORT_XMATCH_C_SIZE = "", DIR=O, VEC=[31:0], ENDIAN = LITTLE
PORT PORT_XMATCH_C_STAT = "", DIR=O, VEC=[31:0], ENDIAN = LITTLE
PORT PORT_XMATCH_D_SIZE = "", DIR=O, VEC=[31:0], ENDIAN = LITTLE
PORT PORT_XMATCH_D_STAT = "", DIR=O, VEC=[31:0], ENDIAN = LITTLE
	
PORT rst_HOST = "", DIR = I
PORT clk_HOST = "", DIR = I
PORT din_HOST = "", DIR = I, VEC = [31:0]
PORT wr_en_HOST = "", DIR = I
PORT rd_en_HOST = "", DIR = I
PORT dout_HOST = "", DIR = O, VEC = [31:0]
PORT full_HOST = "", DIR = O
PORT empty_HOST = "", DIR = O

PORT S_AXIS_UC_IN_TREADY = TREADY, DIR=O, BUS=S_AXIS_UC_IN
PORT S_AXIS_UC_IN_TDATA = TDATA, DIR=I, VEC=[31:0], BUS=S_AXIS_UC_IN
PORT S_AXIS_UC_IN_TLAST = TLAST, DIR=I, BUS=S_AXIS_UC_IN
PORT S_AXIS_UC_IN_TVALID = TVALID, DIR=I, BUS=S_AXIS_UC_IN
PORT M_AXIS_UC_OUT_TVALID = TVALID, DIR=O, BUS=M_AXIS_UC_OUT
PORT M_AXIS_UC_OUT_TDATA = TDATA, DIR=O, VEC=[31:0], BUS=M_AXIS_UC_OUT
PORT M_AXIS_UC_OUT_TLAST = TLAST, DIR=O, BUS=M_AXIS_UC_OUT
PORT M_AXIS_UC_OUT_TREADY = TREADY, DIR=I, BUS=M_AXIS_UC_OUT

PORT S_AXIS_CD_IN_TREADY = TREADY, DIR=O, BUS=S_AXIS_CD_IN
PORT S_AXIS_CD_IN_TDATA = TDATA, DIR=I, VEC=[31:0], BUS=S_AXIS_CD_IN
PORT S_AXIS_CD_IN_TLAST = TLAST, DIR=I, BUS=S_AXIS_CD_IN
PORT S_AXIS_CD_IN_TVALID = TVALID, DIR=I, BUS=S_AXIS_CD_IN
PORT M_AXIS_CD_OUT_TVALID = TVALID, DIR=O, BUS=M_AXIS_CD_OUT
PORT M_AXIS_CD_OUT_TDATA = TDATA, DIR=O, VEC=[31:0], BUS=M_AXIS_CD_OUT
PORT M_AXIS_CD_OUT_TLAST = TLAST, DIR=O, BUS=M_AXIS_CD_OUT
PORT M_AXIS_CD_OUT_TREADY = TREADY, DIR=I, BUS=M_AXIS_CD_OUT

PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI

END
